\\Title :- Consider a student database of SY COMP class (at least 15 records). Database contains different
fields of every student like Roll No, Name and SGPA.

b. Arrange list of Employee alphabetically using Merge Sort
\\Name :- Aditya Bhoye
\\PRN  :- 124B2B016
\\Class & Div :- SYCO(B)
\\ Code
#include <iostream>
#include <string>
#include <iomanip>
#include <vector>

using namespace std;


struct Employee {
    int empID;
    string empName;
    float empSalary;
};


void merge(vector<Employee>& employees, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    vector<Employee> leftEmployees(n1);
    vector<Employee> rightEmployees(n2);


    for (int i = 0; i < n1; i++)
        leftEmployees[i] = employees[left + i];
    for (int j = 0; j < n2; j++)
        rightEmployees[j] = employees[mid + 1 + j];


    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (leftEmployees[i].empName <= rightEmployees[j].empName) {
            employees[k] = leftEmployees[i];
            i++;
        } else {
            employees[k] = rightEmployees[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        employees[k] = leftEmployees[i];
        i++;
        k++;
    }

 
    while (j < n2) {
        employees[k] = rightEmployees[j];
        j++;
        k++;
    }
}


void mergeSort(vector<Employee>& employees, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        mergeSort(employees, left, mid);
        mergeSort(employees, mid + 1, right);

        merge(employees, left, mid, right);
    }
}

void printEmployeeList(const vector<Employee>& employees) {
    cout << left << setw(10) << "EMP-ID" << setw(25) << "EMP-NAME" << setw(10) << "EMP-SALARY" << endl;
    cout << string(55, '-') << endl;
    for (const auto& employee : employees) {
        cout << setw(10) << employee.empID
            << setw(25) << employee.empName
            << setw(10) << employee.empSalary << endl;
    }
}

int main() {
    vector<Employee> employees = {
        {101, "Alice Johnson", 60000},
        {102, "Bob Smith", 55000},
        {103, "Charlie Brown", 70000},
        {104, "David Wilson", 48000},
        {105, "Eva Adams", 52000},
        {106, "Frank Harris", 58000},
        {107, "Grace Lee", 62000},
        {108, "Henry White", 75000},
        {109, "Ivy Martinez", 49000},
        {110, "Jack Robinson", 56000},
        {111, "Kevin Thompson", 64000},
        {112, "Lily King", 80000},
        {113, "Mark Lewis", 59000},
        {114, "Nancy Clark", 53000},
        {115, "Oscar Hall", 51000},
        {116, "Peter Parker", 72000},
        {117, "Quinn McKenzie", 68000},
        {118, "Rachel Green", 55000},
        {119, "Steve Rogers", 90000},
        {120, "Tom Hardy", 61000},
        {121, "Uma Thurman", 70000}
    };

    mergeSort(employees, 0, employees.size() - 1);

    cout << "Employee List (Sorted Alphabetically by Name):\n";
    printEmployeeList(employees);

    return 0;
}

