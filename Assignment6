\\Title :- Consider two polynomial expressions of any degree. Design solution to perform addition of these
two polynomials with suitable data structure and display results.
a. Add route
b. Remove route
c. Display route
\\Name :- Aditya Bhoye
\\PRN  :- 124B2B016
\\Class & Div :- SYCO(B)
\\ Code

#include <iostream>
using namespace std;

struct Node {
    int coeff;
    int exp;
    Node* next;

    Node(int c, int e) : coeff(c), exp(e), next(nullptr) {}
};


class Polynomial {
private:
    Node* head;

public:
    Polynomial() : head(nullptr) {}


    void insertTerm(int coeff, int exp) {
        Node* newNode = new Node(coeff, exp);
        if (!head || head->exp < exp) {
            newNode->next = head;
            head = newNode;
        } else {
            Node* current = head;
            Node* previous = nullptr;
            while (current && current->exp >= exp) {
                if (current->exp == exp) {
                    current->coeff += coeff;
                    delete newNode;
                    return;
                }
                previous = current;
                current = current->next;
            }
            newNode->next = current;
            if (previous) {
                previous->next = newNode;
            }
        }
    }

    void display() {
        if (!head) {
            cout << "0";
            return;
        }
        Node* current = head;
        while (current) {
            if (current->coeff > 0 && current != head) {
                cout << "+";
            }
            cout << current->coeff << "x^" << current->exp;
            current = current->next;
        }
        cout << endl;
    }


    Polynomial add(Polynomial& other) {
        Polynomial result;
        Node* p1 = head;
        Node* p2 = other.head;

        while (p1 || p2) {
            if (p1 && (!p2 || p1->exp > p2->exp)) {
                result.insertTerm(p1->coeff, p1->exp);
                p1 = p1->next;
            } else if (p2 && (!p1 || p2->exp > p1->exp)) {
                result.insertTerm(p2->coeff, p2->exp);
                p2 = p2->next;
            } else {

                result.insertTerm(p1->coeff + p2->coeff, p1->exp);
                p1 = p1->next;
                p2 = p2->next;
            }
        }
        return result;
    }


    ~Polynomial() {
        Node* current = head;
        while (current) {
            Node* toDelete = current;
            current = current->next;
            delete toDelete;
        }
    }
};


int main() {
    Polynomial poly1, poly2;


    poly1.insertTerm(3, 4);
    poly1.insertTerm(2, 3);
    poly1.insertTerm(5, 1);
    poly1.insertTerm(1, 0);


    poly2.insertTerm(4, 4);
    poly2.insertTerm(3, 2);
    poly2.insertTerm(2, 0);

    cout << "First Polynomial: ";
    poly1.display();

    cout << "Second Polynomial: ";
    poly2.display();


    Polynomial result = poly1.add(poly2);
    cout << "Resultant Polynomial after addition: ";
    result.display();

    return 0;
}

